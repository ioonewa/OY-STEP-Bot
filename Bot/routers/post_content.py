from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InputMediaPhoto
)
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.filters import CommandStart, CommandObject
from ..utils import keyboards as kb
from ..utils.get_content import get_personal_photo

from .interface import menu

from Database.enums.media_files import FileTypes

from loader import database

from typing import Optional

import logging

router = Router()

# https://t.me/oystep_bot?start=post1
# https://t.me/oystep_bot?start=2
# https://t.me/oystep_bot?start=3
# https://t.me/oystep_bot?start=4
# https://t.me/oysteptest_bot?start=2

async def get_post_preview(
        message: Message,
        post_id: int,
        style: Optional[str] = None,
        need_replace: bool = False
    ):

    styles = await database.get_post_styles(post_id)
    

    if not style:
        style = styles[0]

    preview = await database.get_content_files(
        post_id=post_id,
        style=style,
        file_type=FileTypes.STYLE_PREVIEW
    )

    preview = preview[0]

    reply_markup = reply_markup=kb.post_styles_kb(post_id, styles, style)
    text="–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏/–∏—Å—Ç–æ—Ä–∏–∏"

    if not need_replace:
        await message.answer_photo(
            photo=preview,
            caption=text,
            reply_markup=reply_markup
        )
    else:
        await message.edit_media(
            media=InputMediaPhoto(media=preview, caption=text),
            reply_markup=kb.post_styles_kb(post_id, styles, style)
        )

@router.callback_query(F.data.startswith("preview:"))
async def change_vars(call: CallbackQuery):
    place, post_id, style  = call.data.split(":")

    post_id = int(post_id)

    await get_post_preview(
        call.message,
        post_id, style,
        need_replace=True
    )

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ü–æ—Å—Ç
@router.callback_query(F.data.startswith("post:"))
async def get_post_content(call: CallbackQuery):
    user_id = call.from_user.id
    place, post_id, style  = call.data.split(":")
    post_id = int(post_id)

    files = await database.get_content_files(
        post_id=post_id,
        style=style,
        file_type=FileTypes.POST_PHOTO
    )

    user_data = await database.get_user_data_dict(user_id)
    personal_photo_id = await get_personal_photo(
        user_data=user_data,
        style=style,
        telegram_id=user_id,
        post_id=post_id,
        obj="post"
    )

    files.append(personal_photo_id)

    caption = await database.get_post_text(post_id)

    media_group = MediaGroupBuilder(
        caption=caption + f"\n\n–ù–∞–ø–∏—à–∏ –º–Ω–µ, –∏ —è –ø–æ–º–æ–≥—É –≤—ã–±—Ä–∞—Ç—å –ª—É—á—à—É—é –∫–≤–∞—Ä—Ç–∏—Ä—É: @{user_data['username']}",
        media=[
            InputMediaPhoto(media=file) for file in files
        ]
    )

    await call.message.answer_media_group(media=media_group.build(), protect_content=False)
    # –ú–µ—Å—Ç–æ –¥–ª—è –æ–±—É—á–∞–ª–∫–∏
    await send_instructions(call.message, "post")
    await call.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ò—Å—Ç–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("story:"))
async def get_content_story(call: CallbackQuery):
    user_id = call.from_user.id
    place, post_id, style  = call.data.split(":")
    post_id = int(post_id)

    files = await database.get_content_files(
        post_id=post_id,
        style=style,
        file_type=FileTypes.STORY_PHOTO
    )

    user_data = await database.get_user_data_dict(user_id)
    personal_photo_id = await get_personal_photo(
        user_data=user_data,
        style=style,
        telegram_id=user_id,
        post_id=post_id,
        obj="story"
    )

    files.append(personal_photo_id)

    media_group = MediaGroupBuilder(
        media=[
            InputMediaPhoto(media=file) for file in files
        ]
    )

    await call.message.answer_media_group(media=media_group.build(), protect_content=False)
    # –ú–µ—Å—Ç–æ –¥–ª—è –æ–±—É—á–∞–ª–∫–∏
    await send_instructions(call.message, "story")
    await call.answer()

instructions = {
    "story": {
        "tg": """üëÜüèª <b>–ö–∞–∫ –≤—ã–ª–æ–∂–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ Telegram</b>

1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–æ—Ç–æ ‚Üí –Ω–∞–∂–º–∏—Ç–µ ‚ãØ ‚Üí –°–æ—Ö—Ä–∞–Ω–∏—Ç—å

2. –í–≤–µ—Ä—Ö—É –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –Ω–∞–∂–º–∏—Ç–µ –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è (+).

3. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑ –ì–∞–ª–µ—Ä–µ–∏

4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ.

5. –ù–∞–∂–º–∏—Ç–µ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏ –≤—ã–±–µ—Ä–∏—Ç–µ, –∫—Ç–æ —É–≤–∏–¥–∏—Ç –∏—Å—Ç–æ—Ä–∏—é.""",
        "ig": """üëÜüèª <b>–ö–∞–∫ –≤—ã–ª–æ–∂–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ Instagram</b>

1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–æ—Ç–æ –≤ –ì–∞–ª–µ—Ä–µ—é.

2. –û—Ç–∫—Ä–æ–π—Ç–µ Instagram ‚Üí –Ω–∞–∂–º–∏—Ç–µ (+) ‚Üí –ò—Å—Ç–æ—Ä–∏—è.

3. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑ –ì–∞–ª–µ—Ä–µ–∏.

4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Å—Ç–∏–∫–µ—Ä—ã, –º—É–∑—ã–∫—É.

5. –ù–∞–∂–º–∏—Ç–µ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è.""",
        "wa": """üëÜüèª <b>–ö–∞–∫ –≤—ã–ª–æ–∂–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤ WhatsApp</b>

1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–æ—Ç–æ –≤ –ì–∞–ª–µ—Ä–µ—é.

2. –û—Ç–∫—Ä–æ–π—Ç–µ WhatsApp ‚Üí –≤–∫–ª–∞–¥–∫–∞ –°—Ç–∞—Ç—É—Å.

3. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ –∫–∞–º–µ—Ä—ã.

4. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑ –ì–∞–ª–µ—Ä–µ–∏.

5. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —Å–º–∞–π–ª—ã –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å.

6. –ù–∞–∂–º–∏—Ç–µ –û—Ç–ø—Ä–∞–≤–∏—Ç—å ‚Üí —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤—Å–µ–º –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–∞–º.""",
    },
    "post": {
        "tg": """<b>üëÜüèª –ö–∞–∫ –≤—ã–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç –≤ Telegram</b>

1. –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ø–æ—Å—Ç –≤ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª.

2. <b>–ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–∫—Ä—ã—Ç—å –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.</b>""",
        "ig": """üëÜüèª <b>–ö–∞–∫ –≤—ã–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç –≤ Instagram</b>

1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ñ–æ—Ç–æ –≤ –ì–∞–ª–µ—Ä–µ—é.

2. –û—Ç–∫—Ä–æ–π—Ç–µ Instagram ‚Üí –Ω–∞–∂–º–∏—Ç–µ (+) ‚Üí –ü—É–±–ª–∏–∫–∞—Ü–∏—è.

3. –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ç–æ –∏–∑ –ì–∞–ª–µ—Ä–µ–∏.

4. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ.

5. –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥–ø–∏—Å—å, —Ö—ç—à—Ç–µ–≥–∏ –∏ –æ—Ç–º–µ—Ç—å—Ç–µ –ª—é–¥–µ–π.

6. –ù–∞–∂–º–∏—Ç–µ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Üí –ø–æ—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ.""",
    }
}


async def send_instructions(message: Message, obj: str, platform:str = "tg", need_replace: bool = False):
    instruction_text = instructions.get(obj, {}).get(platform, "")
    if not instruction_text:
        await message.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        logging.info(f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è {obj} –Ω–∞ {platform}")
        return
    
    if need_replace:
        await message.edit_text(
            instruction_text,
            reply_markup=kb.post_tips_tg(obj, platform)
        )
    else:
        await message.answer(
            instruction_text,
            reply_markup=kb.post_tips_tg(obj, platform)
        )

@router.callback_query(F.data.startswith("p_tip:"))
async def post_tip(call: CallbackQuery):
    place, obj, platform = call.data.split(":")
    await send_instructions(call.message, obj, platform, need_replace=True)

@router.callback_query(F.data == "current_tip")
@router.callback_query(F.data == "current_style")
async def current_var(call: CallbackQuery):
    await call.answer()

