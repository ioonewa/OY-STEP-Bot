from aiogram import Router, F
from aiogram.types import (
    Message,
    FSInputFile,
    CallbackQuery,
    InputMediaDocument
)
from aiogram.fsm.context import FSMContext
from aiogram.utils.media_group import MediaGroupBuilder
from aiogram.enums import ChatAction
from aiogram.filters import CommandStart


from ..utils import keyboards as kb
from ..utils.states import Registration
from ..utils.stash import stash_img
from ..utils.get_content import get_user_preview

import re
import os

from loader import database
from Database.enums.user import UserStatus

import asyncio

import logging

logger = logging.getLogger(__name__)


router = Router()

# ---------- START REGISTRATION ----------
async def start_registration(message: Message, state: FSMContext, user_id: int):
    await database.update_user_status(user_id, UserStatus.REGISTRATION)
    await message.answer(
        "–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫:\n\n"
        "üîí –ü—Ä–∏–≤–∞—Ç–Ω–æ–º—É —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—É —Å —Ç–æ–ø–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n\n"
        "‚≠êÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è –≤–∞—à–∏—Ö —Å–æ—Ü—Å–µ—Ç–µ–π\n\n"
        "üî• –û–±—É—á–µ–Ω–∏—é: –ö–∞–∫ –≤—ã–π—Ç–∏ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–¥–∞–∂\n\n"
        "üèô –ö–∞–ª–µ–Ω–¥–∞—Ä—é –±—Ä–æ–∫–µ—Ä-—Ç—É—Ä–æ–≤",
        reply_markup=kb.remove_kb()
    )

    media_group = MediaGroupBuilder(
        media=[
            InputMediaDocument(media="documents/–ü–æ–ª–∏—Ç–∏–∫–∞_–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏_–û–§–ò–°_–ë–†–û–ö–ï–†–ê.pdf"),
            InputMediaDocument(media="documents/–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ_—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ_–û–§–ò–°_–ë–†–û–ö–ï–†–ê.pdf"),
            InputMediaDocument(media="documents/–ü—É–±–ª–∏—á–Ω–∞—è_–æ—Ñ–µ—Ä—Ç–∞_–û–§–ò–°_–ë–†–û–ö–ï–†–ê.pdf"),
            InputMediaDocument(media="documents/–°–æ–≥–ª–∞—Å–∏–µ_–Ω–∞_–æ–±—Ä–∞–±–æ—Ç–∫—É_–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö_–¥–∞–Ω–Ω—ã—Ö_–û–§–ò–°_–ë–†–û–ö–ï–†–ê.pdf"),
        ]
    )

    await message.answer_media_group(media_group.build())
    await message.answer(
        "üëÜüèª\n–ü–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –≤—ã—à–µ\n\n–ü—Ä–æ–¥–æ–ª–∂–∞—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏",
        reply_markup=kb.reg_kb()
    )

@router.callback_query(F.text == "reg:agree")
async def approve_reg(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    await input_name(call.message, state)

async def input_name(message: Message, state: FSMContext):
    await message.answer(
        "üü©‚¨úÔ∏è‚¨úÔ∏è‚¨úÔ∏è\n[ 1/4 ]\n\n<b>–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é (–≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ)</b>",
        reply_markup=kb.remove_kb()
    )
    await state.set_state(Registration.name)


async def input_phone(message: Message, state: FSMContext):
    await message.answer(
        "üü©üü©‚¨úÔ∏è‚¨úÔ∏è\n[ 2/4 ]\n\n<b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7...)</b>",
        reply_markup=kb.pin_phone_kb()
    )
    await state.set_state(Registration.phone_number)


async def input_email(message: Message, state: FSMContext):
    await message.answer(
        "üü©üü©üü©‚¨úÔ∏è\n[ 3/4 ]\n\n<b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à Email</b>",
        reply_markup=kb.back_kb()
    )
    await state.set_state(Registration.email)


async def input_photo(message: Message, state: FSMContext):
    await message.answer(
        "üü©üü©üü©üü©\n[ 4/4 ]\n\n<b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∞—à—É –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b>",
        reply_markup=kb.back_kb()
    )
    await state.set_state(Registration.photo)

# ---------- VALIDATION ----------
def validate_phone(phone_raw: str) -> str | None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç +7XXXXXXXXXX"""
    phone = re.sub(r"\D", "", phone_raw)

    # –ó–∞–º–µ–Ω—è–µ–º 8 –Ω–∞ 7
    if phone.startswith("8"):
        phone = "7" + phone[1:]

    if not phone.startswith("7"):
        return None

    if len(phone) != 11:
        return None

    return f"+{phone}"

async def finish_registration(message: Message, state: FSMContext):
    reg_data = await state.get_data()

    photo_tg = await stash_img(reg_data['photo_source'])
    user_id = message.from_user.id

    try:
        await database.registrate_user(
            telegram_id=user_id,
            photo_tg=photo_tg,
            **reg_data
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    except Exception as ex:
        logging.error(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({user_id}): {reg_data} - {ex}")
        await message.reply(f"–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å. –î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @ionewa")
        return

    await state.clear()
    
    # –§—É–Ω–∫—Ü–∏—è menu –≤ interface, –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä
    await message.answer(
        "<b>OYBOT</b> - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π –±–æ—Ç –¥–ª—è –±—Ä–æ–∫–µ—Ä–æ–≤.\n\n"
        "<b>–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç:</b>\n\n"
        "‚Äî –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n\n"
        "‚Äî –°–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±—Ä–æ–∫–µ—Ä–æ–≤-—Ç—É—Ä–æ–≤\n\n"
        "‚Äî –ü–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–∫–∏–ª–ª—ã (—Ä–∞–∑–¥–µ–ª \"–û–±—É—á–µ–Ω–∏–µ\")",
        reply_markup=kb.menu_kb()
    )
    # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç—É–ø –≤ –∫–∞–Ω–∞–ª
    await message.answer(
        "<b>–í–∞–º –æ—Ç–∫—Ä—ã—Ç –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–µ —á–∞—Ç—ã</b>",
        reply_markup=kb.channel_invite_kb()
    )
    
@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    await start_registration(message, state, message.from_user.id)

# ---------- NAME HANDLERS ----------
@router.message(F.text, Registration.name)
async def reg_stage_2(message: Message, state: FSMContext):
    name = message.text.strip()
    if len(name.split(" ")) != 2:
        await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ò–º—è –∏ –§–∞–º–∏–ª–∏—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return
    
    await state.update_data(name=name)
    await input_phone(message, state)

@router.message(Registration.phone_number, F.text == kb.BACK_BTN)
@router.message(Registration.name)
async def reg_stage_2_wrong(message: Message, state: FSMContext):
    await input_name(message, state)


# ---------- PHONE HANDLERS ----------
@router.message(F.contact, Registration.phone_number)
async def reg_stage_3_contact(message: Message, state: FSMContext):
    contact = message.contact
    if contact.user_id != message.from_user.id:
        await message.reply("–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç")
        return
    
    phone = validate_phone(contact.phone_number)
    if not phone:
        await message.reply("–ù–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return
    
    await state.update_data(phone_number=phone)
    await input_email(message, state)


@router.message(F.text, Registration.phone_number)
async def reg_stage_3_text(message: Message, state: FSMContext):
    phone = validate_phone(message.text)
    if not phone:
        await message.reply("–ù–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return
    
    await state.update_data(phone_number=phone)
    await input_email(message, state)

@router.message(Registration.email, F.text == kb.BACK_BTN)
@router.message(Registration.phone_number)
async def reg_stage_3_wrong(message: Message, state: FSMContext):
    await input_phone(message, state)


# ---------- EMAIL HANDLERS ----------
@router.message(F.text, Registration.email)
async def reg_stage_4(message: Message, state: FSMContext):
    email = message.text.strip()
    if not re.match(r"^[\w\.-]+@[\w\.-]+\.\w+$", email):
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        return
    
    await state.update_data(email=email)
    await input_photo(message, state)

@router.message(Registration.photo, F.text == kb.BACK_BTN)
@router.message(F.text, Registration.email)
async def reg_stage_4_wrong(message: Message, state: FSMContext):
    await input_email(message, state)

# ---------- PHOTO HANDLERS ----------
@router.message(F.photo | F.document, Registration.photo)
async def reg_stage_5(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    save_dir = f"photos/{tg_id}"
    os.makedirs(save_dir, exist_ok=True)
    file_path = f"{save_dir}/photo.png"

    if message.photo:
        file_id = message.photo[-1].file_id
    elif message.document and message.document.mime_type.startswith("image/"):
        file_id = message.document.file_id
    else:
        await input_photo(message, state)
        return

    file = await message.bot.get_file(file_id)
    await message.bot.download_file(file.file_path, destination=file_path)

    await state.update_data(photo_source=file_path)

    preview_photo = get_user_preview(file_path)
    
    await message.answer_photo(
        photo=FSInputFile(path=preview_photo),
        caption="<b>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à–µ –ª–∏—Ü–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–º–∫–µ.</b>\n\n"
        "–í –Ω–∞—à–∏—Ö —à–∞–±–ª–æ–Ω–∞—Ö –º—ã –±—É–¥–µ–º —Ä–∞–∑–º–µ—â–∞—Ç—å –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –Ω–µ–º–Ω–æ–≥–æ –æ–±—Ä–µ–∑–∞—è –µ–µ. –í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –ü—Ä–æ—Ñ–∏–ª–µ.",
        reply_markup=kb.approve_photo_kb()
    )
    await state.set_state(Registration.approve_photo)

@router.message(Registration.approve_photo, F.text == kb.CHANGE_PHOTO_BTN)    
@router.message(Registration.approve_photo, F.text == kb.APPROVE_PHOTO_BTN)
async def approve_photo(message: Message, state: FSMContext):
    btn = message.text
    if btn == kb.APPROVE_PHOTO_BTN:
        await finish_registration(message, state)
    else:
        await input_photo(message, state)

@router.message(Registration.approve_photo)
async def approve_photo_wrong(message: Message):
    await message.answer("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π", reply_markup=kb.approve_photo_kb())

@router.message(Registration.photo)
async def reg_stage_5_wrong(message: Message, state: FSMContext):
    await input_photo(message, state)

@router.callback_query()
async def process_callback_query(call: CallbackQuery, state: FSMContext):
    await call.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")