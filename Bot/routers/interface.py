from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    CallbackQuery,
    FSInputFile
)
from aiogram.enums import ChatAction

from loader import database
from Database.enums.user import UserStatus

from .registration import start_registration
from ..utils import keyboards as kb

import config

router = Router()


@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    user = message.from_user
    status = await database.get_user_status(user.id)

    if status == UserStatus.INVITED:
        await message.answer("<b>–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ñ–æ–∫—É—Å –≥—Ä—É–ø–ø—É –¥–ª—è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!</b>")
        await database.update_user_status(user.id, UserStatus.REGISTRATION)
        # –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await start_registration(message, state)
    else:
        # –í—ã–∑–≤–∞—Ç—å –º–µ–Ω—é
        await menu(message)

async def menu(message: Message):
    await message.answer(
        "<b>OYBOT</b> - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π –±–æ—Ç –¥–ª—è –±—Ä–æ–∫–µ—Ä–æ–≤.\n\n"
        "<b>–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ–º:</b>\n\n"
        "‚Äî –°–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n\n"
        "‚Äî –°–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å –±—Ä–æ–∫–µ—Ä–æ–≤-—Ç—É—Ä–æ–≤\n\n"
        "‚Äî –ü–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ —Å–∫–∏–ª–ª—ã (—Ä–∞–∑–¥–µ–ª \"–û–±—É—á–µ–Ω–∏–µ\")",
        reply_markup=kb.menu_kb()
    )

@router.message(F.text == kb.LESSONS_BTN)
async def lessons(message: Message):
    await message.answer(
        "<b>–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 3 –≤–∏–¥–µ–æ-—É—Ä–æ–∫–∞.</b>\n\n"
        "1. –ü–æ—á–µ–º—É –≤–∞–∂–µ–Ω –ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥? | 1:39\n\n"
        "2. –ö–∞–∫ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –±–æ—è—Ç—å—Å—è –∫–∞–º–µ—Ä—ã? | 1:51\n\n"
        "3. –ö–∞–∫ —Å–Ω–∏–º–∞—Ç—å —Å—Ç–∏–ª—å–Ω–æ? | 2:08",
        reply_markup=kb.lessons_kb()
    )

@router.message(F.text == kb.TOURS_BTN)
async def tours(message: Message):
    await message.answer_photo(
        photo="AgACAgIAAxkDAAOdaLacYDPxcVLWqLOoPX7K-_FelE8AAk34MRsbdbBJSSr8FvfJAAFfAQADAgADeQADNgQ",
        caption="""<b>–ë—Ä–æ–∫–µ—Ä-—Ç—É—Ä—ã MR ‚Äî I –ø–æ–ª–æ–≤–∏–Ω–∞ —Å–µ–Ω—Ç—è–±—Ä—è 2025</b>

–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –Ω–∞ –±—Ä–æ–∫–µ—Ä-—Ç—É—Ä—ã, –≤—ã–±–∏—Ä–∞–π—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Å–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å. 

<b>–ù–∞—á–∞–ª–æ –≤—Å–µ—Ö —Ç—É—Ä–æ–≤ ‚Äî –≤ 11:00</b>

<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</b>
üîò <a href="https://open-list--mr-group.timepad.ru/event/3481076/">–ú–´.–°</a>
üîò <a href="https://open-list--mr-group.timepad.ru/event/3067699/">JOIS</a>
üîò <a href="https://open-list--mr-group.timepad.ru/event/3107158/">City Bay</a>
üîò <a href="https://open-list--mr-group.timepad.ru/event/3481020/">CITYZEN</a>
üîò <a href="https://open-list--mr-group.timepad.ru/event/3107001/">–ú–òR–ê</a>
üîò <a href="https://open-list--mr-group.timepad.ru/event/3107038/">–£ –†–µ–∫–∏. –≠–∫–æ –í–∏–¥–Ω–æ–µ 2.0</a>
üîò <a href="https://open-list--mr-group.timepad.ru/event/3155215/">Symphony 34</a>
üîò <a href="https://open-list--mr-group.timepad.ru/event/3155210/">VEER / SET</a>
üîò <a href="https://open-list--mr-group.timepad.ru/event/3067669/">SLAVA</a>
üîò <a href="https://open-list--mr-group.timepad.ru/event/3067707/">–ú–µ—Ç—Ä–æ–ø–æ–ª–∏—è</a>
üîò <a href="https://open-list--mr-group.timepad.ru/event/3067629/">MOD</a>
üîò <a href="https://open-list--mr-group.timepad.ru/event/3107071/">Famous</a>
üîò <a href="https://open-list--mr-group.timepad.ru/event/3107086/">–°–µ–ª–∏–≥–µ—Ä –°–∏—Ç–∏</a>
üîò <a href="https://open-list--mr-group.timepad.ru/event/3531754/">One</a>
"""
    )

@router.message(F.text == kb.CHANNEL_BTN)
async def channel(message: Message):
    await message.answer(
        "<b>–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 2 –∫–∞–Ω–∞–ª–∞.</b>\n\n"
        f"–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª\n\n"
        "<a href='https://t.me/oystepmediaburo'>–ù–æ–≤–æ—Å—Ç–Ω–æ–π –∫–∞–Ω–∞–ª</a>",
        reply_markup=kb.channel_invite_kb()
    )

@router.message(F.text == kb.FAQ_BTN)
async def faq(message: Message):
    await message.answer(
        """<b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã</b>
        
‚ñ´Ô∏è –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç?
\t\t\t\t- –ë–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã –∏ –≤—ã–¥–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.

‚ñ´Ô∏è –°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞?
\t\t\t\t- –¶–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.

‚ñ´Ô∏è –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç?
\t\t\t\t- –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —á–∞—Ç –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.

‚ñ´Ô∏è –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞?
\t\t\t\t- –î–∞, –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ Telegram –Ω–∞ –ª—é–±—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö.

‚ñ´Ô∏è –ö –∫–æ–º—É –æ–±—Ä–∞—â–∞—Ç—å—Å—è –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö?
\t\t\t\t- –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É""",
        reply_markup=kb.faq_kb()
    )


@router.message(F.text == kb.SETTINGS_BTN)
async def development(message: Message):
    await message.reply("–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
lessons_files = {
    "1": {
        "url": "https://t.me/POLPUGA7BC0MZZOVBC57/2",
        "name": "–ü–û–ß–ï–ú–£ –í–ê–ñ–ï–ù –õ–ò–ß–ù–´–ô –ë–†–ï–ù–î?"
    },
    "2": {
        "url": "https://t.me/POLPUGA7BC0MZZOVBC57/3",
        "name": "–ö–ê–ö –ü–ï–†–ï–°–¢–ê–¢–¨ –ë–û–Ø–¢–¨–°–Ø –ö–ê–ú–ï–†–´?"
    },
    "3": {
        "url": "https://t.me/POLPUGA7BC0MZZOVBC57/5",
        "name": "–ö–ê–ö –°–ù–ò–ú–ê–¢–¨ –°–¢–ò–õ–¨–ù–û?"
    } 
}

@router.message(F.text == kb.PROFILE_BTN)
async def profile(message: Message):
    user_data = await database.get_user_data_dict(message.from_user.id)
    await message.answer_photo(
        photo=user_data['photo_tg'],
        caption=f"<b>{user_data['name']}</b>\n\n"
        f"https://t.me/{user_data['username']}\n"
        f"{user_data['phone_number']}\n"
        f"{user_data['email']}"
    )

@router.callback_query(F.data.startswith("lesson:"))
async def lesson_id(call: CallbackQuery):
    lesson_id = call.data.replace("lesson:", "")

    lesson = lessons_files.get(lesson_id)
    if not lesson:
        await call.answer("–í–∏–¥–µ–æ-—É—Ä–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return
    
    await call.bot.send_chat_action(
        call.from_user.id,
        action=ChatAction.UPLOAD_VIDEO
    )
    await call.message.answer_video(
        video=lesson['url'],
        caption=lesson['name']
    )
    await call.answer()

@router.callback_query()
async def development(call: CallbackQuery):
    await call.answer(f"–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")